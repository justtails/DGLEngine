<HTML>
<HEAD>
    <TITLE>DRON_PROGS</TITLE> 
<META content="text/html; charset=WINDOWS-1251" http-equiv=Content-Type>                     
<META name="author" content="DRON">
<META name="keywords" content="программирование, программирование игр, gamedev, Delphi, Java, J2ME, C#, C++, mono, tao, фото, engine, 3d, полезные программы, звук, графика, коды, DirectX, OpenGL, библиотеки, компоненты, как создать игру, движок, движок на Delphi, DRON, Коротков Андрей, скачать, примеры, исходники, source, OpenGL Engine, 3D, анимированные модели, max, Power Draw, Asphyre, DelphiX, обучение, dglengine, бесплатно, ролевая игра, RPG, стрелялка, shooter, games, статьи, помощь"> 
<META name="description" content="Обитель DRON'а. Программирование на Delphi, C#, C++ и J2ME. Gamedev: 2D/3D, статьи, исходники, примеры, движки."> 
<style type="text/css">
#menu_body{background:#808080;width:140px}
#menu_body ul li{list-style-type:none;border-bottom:1px solid #fff;margin-left:-40px;padding-left:7px}
#menu_body ul li a{color:#fff;font-family:verdana,arial,sans-serif;text-decoration:none}
#menu_body ul li ul li{border:0;list-style-type:square;color:#fff;list-style-position:inside}
#menu_body ul li ul{border-top:1px solid #fff;margin-left:-7px;padding-left:50px}
#menu_body li ul{display:none}
#menu_body li:hover ul, #menu_body li.over ul{display: block}

body,td,th {
	font-family:  tahoma, Arial, Helvetica;
	font-size: 11px;
	color: Black;
	text-decoration:none;
}
body {
	background-color: White;
	margin-left: 0px;
	margin-top: 0px;
	margin-right: 0px;
	margin-bottom: 0px;
	text-decoration:none;
}
a:link {
	color: Black;
	text-decoration:none;
}
a:visited {
	color: Black;
	text-decoration:none;
}
a:hover {
	color: Gray;
	text-decoration:underline;
}
a:active {
	color: Gray;
	text-decoration:none;
}
</style>

<script type="text/javascript">
startList = function() {
      if (document.all&&document.getElementById) {
            navRoot = document.getElementById("ul1");
            for (i=0; i<navRoot.childNodes.length; i++) {
                  node = navRoot.childNodes[i];
                  if (node.nodeName=="LI") {
                        node.onmouseover=function() {
                              this.className+=" over";
                        }
                        node.onmouseout=function() {
                              this.className=this.className.replace(" over", "");
                        }
                  }
            }
      }
}
window.onload=startList;
</script>
</HEAD>        
<BODY BottomMargin=0 text=Black color=#ffffff style="background:url('images/up.jpg') top center no-repeat;" topmargin="0" leftmargin="0">
<table cellspacing="0" align=center cellpadding="0" width=90% border=0 height=100% >
<tr><td height=100% background="images/cornerl.gif">&nbsp;</td>
<td><table border=0 style="background:url('images/dronslogo.gif') top right no-repeat;" cellspacing="0" cellpadding="0">
<tr><td valign=top>
<table width=100% border=0 cellspacing="0" cellpadding="3"><br>
<center><img src="images/dron_small.gif" width=100 height=98 border=0></center>
<br>
<? include("menu.txt");?>
</table></td>
<td>
<table border=0 style="background:url('images/line.gif') top left no-repeat;" cellspacing="4" cellpadding="4">
<tr>
<td style="padding-top:20px" height=100% valign=top>

<br><br>
<b><a href="index.htm"><u>Уроки по DGLEngine</u></a> &#151;> "Столкновения и анимация в 2D"</b><br><br>

<p>Ну вот, на очереди 2D анимация или попросту &#151; спрайты, без которой естественно ни одна игра обойтись не может. Нам понадобиться еще две текстуры, на этот раз –&nbsp;взрыв и&nbsp;астероид(если тебе негде взять такую, то скачай внизу пример из статьи). Прежде, чем перейти к&nbsp;анимации мы сделаем что бы на игрока летели астероиды. Итак, писать еще один типа специально для астероидов –&nbsp;не стоит, можно воспользоваться уже готовым TPlasma, но еще один массив и&nbsp;процедуры обсчета и&nbsp;отрисовки создать обязательно надо, как это делать ты наверное прочитал в&nbsp;предыдущей статье, по этому, сейчас я&nbsp;приведу уже готовый код, в&nbsp;котором ничего не должно вызвать вопросов:<br />procedure CreateAsteroid(X,Y :&nbsp;integer);<br />var i&nbsp;: integer;<br />begin<br />if length(Asteroids)<>0 then<br />for i:=0 to length(Asteroids)-1 do<br />if not Asteroids[i].Active then<br />begin<br />Asteroids[i].Active:=true;<br />Asteroids[i].X:=X;<br />Asteroids[i].Y:=Y;<br />Asteroids[i].Angle:=0;<br />Asteroids[i].Colrect:=Rect(X,Y,64,64);<br />Exit;<br />end;<br /><br />SetLength(Asteroids,length(Asteroids)+1);<br />Asteroids[length(Asteroids)-1].Active:=true;<br />Asteroids[length(Asteroids)-1].X:=X;<br />Asteroids[length(Asteroids)-1].Y:=Y;<br />Asteroids[length(Asteroids)-1].Angle:=0;<br />Asteroids[length(Asteroids)-1].Colrect:=Rect(X,Y,64,64);<br /><br />end;<br /><br />procedure ProcessAsteroid;<br />var i&nbsp;: integer;<br />begin<br />for i:=0 to Length(Asteroids)-1 do<br />if Asteroids[i].Active then<br />begin<br />if Asteroids[i].Y>640 then Asteroids[i].Active:=false;<br />Asteroids[i].Y:=Asteroids[i].Y+6;<br />Asteroids[i].Colrect:=Rect(Asteroids[i].X,Asteroids[i].Y,64,64);<br />Asteroids[i].Angle:=Asteroids[i].Angle+5;<br />end;<br />end;<br /><br />procedure DrawAsteroid;<br />var i&nbsp;: integer;<br />begin<br />for i:=0 to Length(Asteroids)-1 do <br />if Asteroids[i].Active then<br />DrawTexture2D(AsteroidTexture,Asteroids[i].X,Asteroids[i].Y,64,64,Asteroids[i].Angle,255,$FFFFFF);<br />end;<br />Не забудь добавить соответствующий идентификатор текстуры, загрузить ее, так же нужно еще помнить об обнулении массива астероидов перед стартом и&nbsp;конечно добавить соответствующие процедуры отрисовки и&nbsp;процесса астероидов в&nbsp;соответствующие глобальные процедуры движка.<br />Затем, добавим на процесс движка, вот такую строчку:<br />if random(25) =&nbsp;10 then CreateAsteroid(random(600),-64);<br />В результате ее работы, время от времени вверху экрана будут появляться астероиды ?<br />Теперь сделаем так, что бы при попадании плазмы в&nbsp;астероид, уничтожалась и&nbsp;плазма и&nbsp;сам астероид. Для этого в&nbsp;процедуру обсчета плазмы допишем кое-что, после чего процедура примет вид:<br />procedure ProcessPlasma;<br />function RectInRect(r:Trect;r2:Trect):boolean; //процедура проверки столкновения двух прямоугольников<br />begin<br />result:=<br />(R.X <&nbsp;R2.X+R2.Width) and<br />(R.X+R.Width >&nbsp;R2.X) and<br />(R.Y <&nbsp;R2.Y+R2.Height) and<br />(R.Y+R.Height >&nbsp;R2.Y) or<br />(R2.X <&nbsp;R.X+R.Width) and<br />(R2.X+R2.Width >&nbsp;R.X) and<br />(R2.Y <&nbsp;R.Y+R.Height) and<br />(R2.Y+R2.Height >&nbsp;R.Y);<br />end;<br /><br />var i,a :&nbsp;integer;<br />begin <br />for i:=0 to Length(Plasma)-1 do <br />if Plasma[i].Active then<br />begin<br />if Plasma[i].Y<0 then Plasma[i].Active:=false;<br />Plasma[i].Y:=Plasma[i].Y-10;<br />Plasma[i].Colrect:=Rect(Plasma[i].X,Plasma[i].Y,64,64);<br />Plasma[i].Angle:=Plasma[i].Angle+5;<br />for a:=0 to length(Asteroids)-1 do // пробегаемся по всему сассиву астероидов<br />if (Asteroids[a].Active) //Если астероид существует<br />and (RectInRect(Plasma[i].Colrect,Asteroids[a].Colrect)) then //и он сталкивается с&nbsp;текущим выстрелом плазмы<br />begin //то уничтожаем и&nbsp;плазму и&nbsp;астероид<br />Asteroids[a].Active:=false;<br />Plasma[i].Active:=false;<br />end;<br />end;<br />end;<br />Теперь, наверное, можно и&nbsp;нужно откомпилировать игру и&nbsp;посмотреть, как все работает и&nbsp;не пропустили ли чего по невниманию.<br />Вот, наконец то добрались собственно до анимации, а&nbsp;надо нам всего-навсего создать взрывы при разрушение астероидов. Для этого добавляем загрузку текстуры взрыва. Описываем новый тип взрыва:<br />TExplo =&nbsp;record<br />Active :&nbsp;boolean;<br />X,Y :&nbsp;integer;<br />Frame :&nbsp;Single;<br />end;<br />Затем, как обычно, описываем три основные процедуры: создание, обсчет и&nbsp;отрисовка.<br />procedure CreateExplo(X,Y :&nbsp;integer);<br />var i&nbsp;: integer;<br />begin<br />if length(Explosions)<>0 then<br />for i:=0 to length(Explosions)-1 do<br />if not Explosions[i].Active then<br />begin<br />Explosions[i].Active:=true;<br />Explosions[i].X:=X;<br />Explosions[i].Y:=Y;<br />Explosions[i].Frame:=1.0;<br />Exit;<br />end;<br /><br />SetLength(Explosions,length(Explosions)+1);<br />Explosions[length(Explosions)-1].Active:=true;<br />Explosions[length(Explosions)-1].X:=X;<br />Explosions[length(Explosions)-1].Y:=Y;<br />Explosions[length(Explosions)-1].Frame:=1.0;<br /><br />end;<br /><br />procedure ProcessExplo;<br />var i&nbsp;: integer;<br />begin<br />for i:=0 to Length(Explosions)-1 do<br />if Explosions[i].Active then<br />begin<br />Explosions[i].Frame:=Explosions[i].Frame+0.5;<br />if round(Explosions[i].Frame)>14 then Explosions[i].Active:=false; //Если анимация закончилась &laquo;убиваем&raquo; взрыв<br />end;<br />end;<br /><br />procedure DrawExplo;<br />var i&nbsp;: integer;<br />begin<br />for i:=0 to Length(Explosions)-1 do<br />if Explosions[i].Active then<br />DrawSprite2D(ExploTexture,Explosions[i].X,Explosions[i].Y,<br />128,110, //размеры одного кадра<br />14,1, //общее кол-во кадров по ширине и&nbsp;высоте<br />round(Explosions[i].Frame),0,200,$FFFFFF,true);<br />end;<br />Я намеренно использовал в&nbsp;примере текстуру очень большого размера, нарушая данные самим же собой рекомендации относительно текстур в&nbsp;одной из предыдущих статей. Я&nbsp;делаю это для того, что бы продемонстрировать, что ничего страшного не произойдет. Хотя если текстура будет слишком большой и&nbsp;выйдет за пределы допускаемые видеокартой, у&nbsp;моей &laquo;старушки&raquo; это 2048*2048, то ошибка –&nbsp;неминуема.<br />Для вывода анимации я&nbsp;использовал самый простой способ, когда размеры текстуры совпадают с&nbsp;размером одного кадра умноженного на их количество, иногда возникает ситуация, что это не так. Например, если мы увеличиваем размеры текстуры до стандартных(два в&nbsp;степени N), что бы придать текстуре резкость. В&nbsp;этом случае следует использовать процедуру отрисовки: DrawSprite2D_Tile.<br />Сейчас нам осталось только в&nbsp;процедуру процесса плазмы добавить создание взрыва, после уничтожения астроида:<br />CreateExplo(Asteroids[a].x-32,Asteroids[a].y-23);<br />Создаем взрыв со сдвигом, что бы он оказался по центру астероида, это нужно т.к. размеры астероида не совпадают с&nbsp;размерами взрыва.<br />Ну вот, теперь смотрим не забыли ли мы добавить процедуры отрисовки и&nbsp;обсчета взрыва в&nbsp;глобальные и&nbsp;запускаем. Вот, игра практически готова, осталось только доделать смерть игрока при столкновение с&nbsp;астероидом и&nbsp;вставить звуки. Это я&nbsp;предлагаю тебе сделать самостоятельно, а&nbsp;следующая статья будет посвящена совмещению 2D и&nbsp;3D графики и&nbsp;звуку.<br /><br /><b><a href="files/tutorial4.rar" target="_blank">Скачать пример из статьи [146Kb] </a></b></p>



<br>
<center><img src="images/stop.gif" width=60 height=57 border=0></center><br>	
</td><tr>                      
<td colspan=2 align=right><img src="images/ugol.gif" width=45 height=49 border=0></td></tr>
</table>
</td></tr>
</table></td>
<td height=100% width=50 background="images/cornerr.gif">&nbsp;</td>
<? include("copy.txt");?>
<td height=1 width=50 background="images/cornerr.gif">&nbsp;</td></tr>
</tr></table>
</BODY>
</HTML>
